{"version":3,"sources":["webpack://HWGA/./src/index.js"],"names":["document","addEventListener","cells","querySelectorAll","turn","querySelector","reset","Player","id","img","className","this","player1","player2","forEach","cell","current","src","classList","add","innerHTML","move","cellsArr","i","length","push","every","el","contains","combinations","cell1","cell2","cell3","highlight","checkWinner","location","reload","arr"],"mappings":"mBAEAA,SAASC,iBAAiB,oBAAoB,WAE1C,MAAMC,EAAQF,SAASG,iBAAiB,eAClCC,EAAOJ,SAASK,cAAc,SAC9BC,EAAQN,SAASK,cAAc,UAGrC,SAASE,EAAOC,EAAIC,EAAKC,GACrBC,KAAKH,GAAKA,EACVG,KAAKF,IAAMA,EACXE,KAAKD,UAAYA,EAGrB,MAAME,EAAU,IAAIL,EAAO,EAAG,mBAAoB,SAC5CM,EAAU,IAAIN,EAAO,EAAG,oBAAqB,UAInDL,EAAMY,SAAQC,IACVA,EAAKd,iBAAiB,SAAS,YAenC,SAAcc,GAEM,IAAZC,GACAD,EAAKV,cAAc,OAAOY,IAAML,EAAQH,IACxCM,EAAKG,UAAUC,IAAIP,EAAQF,aAE3BK,EAAKV,cAAc,OAAOY,IAAMJ,EAAQJ,IACxCM,EAAKG,UAAUC,IAAIN,EAAQH,YAGfM,EAAJ,IAAZA,EAA0B,EAAc,EACxCZ,EAAKgB,UAAa,oCAAmCJ,gBAzBjDK,CAAKV,MA4Bb,WAII,MAAMW,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,EAAMsB,OAAQD,IAC9BD,EAASG,KAAKvB,EAAMqB,IAEpBD,EAASI,OAAMC,GAAMA,EAAGT,UAAUU,SAAShB,EAAQF,YAAciB,EAAGT,UAAUU,SAASf,EAAQH,eAC/FN,EAAKgB,UAAY,QACjBd,EAAMY,UAAUC,IAAI,WAIxB,IAAK,IAAII,EAAI,EAAGA,EAAIM,EAAaL,OAAQD,IAAK,CAG1C,IAAIO,EAAQ5B,EAAM2B,EAAaN,GAAG,IAC9BQ,EAAQ7B,EAAM2B,EAAaN,GAAG,IAC9BS,EAAQ9B,EAAM2B,EAAaN,GAAG,IAE9BO,EAAMZ,UAAUU,SAAS,UAAYG,EAAMb,UAAUU,SAAS,UAAYI,EAAMd,UAAUU,SAAS,UACnGxB,EAAKgB,UAAa,8BAA6BR,EAAQJ,gBAEvDyB,EAAU,CAACH,EAAOC,EAAOC,IACzB1B,EAAMY,UAAUC,IAAI,WACbW,EAAMZ,UAAUU,SAAS,WAAaG,EAAMb,UAAUU,SAAS,WAAaI,EAAMd,UAAUU,SAAS,YAC5GxB,EAAKgB,UAAa,8BAA6BP,EAAQL,gBACvDyB,EAAU,CAACH,EAAOC,EAAOC,IACzB1B,EAAMY,UAAUC,IAAI,YAxDxBe,SAKR5B,EAAML,iBAAiB,SAAS,WAC5BkC,SAASC,YAIb,IAAIpB,EAAU,EACdZ,EAAKgB,UAAa,oCAAmCJ,gBAmDrD,MAAMa,EAAe,CACjB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGX,SAASI,EAAUI,GACfA,EAAIvB,SAAQa,IACRA,EAAGT,UAAUC,IAAI,wB","file":"js/index.8507c24c9c7fdd7a7f3e.bundle.js","sourcesContent":["import './scss/style.scss'\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n    const cells = document.querySelectorAll(\".board-cell\");\n    const turn = document.querySelector(\".turn\");\n    const reset = document.querySelector(\".reset\");\n\n\n    function Player(id, img, className) {\n        this.id = id\n        this.img = img\n        this.className = className\n    }\n\n    const player1 = new Player(1, \"images/cross.svg\", \"cross\")\n    const player2 = new Player(2, \"images/circle.svg\", \"circle\")\n\n\n    // On cell click\n    cells.forEach(cell => {\n        cell.addEventListener(\"click\", function () {\n            move(this);\n            checkWinner();\n        })\n    })\n\n    // On reset click\n    reset.addEventListener(\"click\", function () {\n        location.reload()\n    })\n\n    // Default\n    let current = 1;\n    turn.innerHTML = `Player <span class=\"active-turn\">${current}</span> turn`\n\n    function move(cell) {\n\n        if (current === 1) {\n            cell.querySelector(\"img\").src = player1.img\n            cell.classList.add(player1.className)\n        } else {\n            cell.querySelector(\"img\").src = player2.img\n            cell.classList.add(player2.className)\n        }\n\n        current === 1 ? current = 2 : current = 1;\n        turn.innerHTML = `Player <span class=\"active-turn\">${current}</span> turn`\n    }\n\n    function checkWinner() {\n\n\n        // Check for a draw\n        const cellsArr = [];\n        for (let i = 0; i < cells.length; i++) {\n            cellsArr.push(cells[i])\n        }\n        if (cellsArr.every(el => el.classList.contains(player1.className) || el.classList.contains(player2.className))) {\n            turn.innerHTML = \"Draw!\"\n            reset.classList.add(\"active\")\n        }\n\n        // Loop through arrays of possible combinations\n        for (let i = 0; i < combinations.length; i++) {\n\n            // Winning combination cells\n            let cell1 = cells[combinations[i][0]];\n            let cell2 = cells[combinations[i][1]];\n            let cell3 = cells[combinations[i][2]];\n\n            if (cell1.classList.contains(\"cross\") && cell2.classList.contains(\"cross\") && cell3.classList.contains(\"cross\")) {\n                turn.innerHTML = `<div class=\"winner\">Player ${player1.id} won!</div>`\n\n                highlight([cell1, cell2, cell3])\n                reset.classList.add(\"active\")\n            } else if (cell1.classList.contains(\"circle\") && cell2.classList.contains(\"circle\") && cell3.classList.contains(\"circle\")) {\n                turn.innerHTML = `<div class=\"winner\">Player ${player2.id} won!</div>`\n                highlight([cell1, cell2, cell3])\n                reset.classList.add(\"active\")\n            }\n        }\n\n    }\n\n    const combinations = [\n        [0, 1, 2], // <- for each of these arrays check if corresponding ids have same class (cross/circle)\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n\n    function highlight(arr) {\n        arr.forEach(el => {\n            el.classList.add(\"winning-cell\")\n        })\n    }\n\n})\n\n\n\n"],"sourceRoot":""}